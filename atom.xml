<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Syou</title>
  
  <subtitle>乌鸦为什么像写字台</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://twentyshaw.github.io/"/>
  <updated>2019-11-12T13:02:44.227Z</updated>
  <id>https://twentyshaw.github.io/</id>
  
  <author>
    <name>Syou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS代码题3</title>
    <link href="https://twentyshaw.github.io/2019/11/12/JS%E4%BB%A3%E7%A0%81%E9%A2%983/"/>
    <id>https://twentyshaw.github.io/2019/11/12/JS代码题3/</id>
    <published>2019-11-12T13:00:33.000Z</published>
    <updated>2019-11-12T13:02:44.227Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最大差值"><a href="#最大差值" class="headerlink" title="最大差值"></a>最大差值</h3><p>给定一个未排序的数列，找到此数列在已排序状态下的两个相邻值的最大差值，少于两个值时返回0。例如：给定数列 [1,3,2,0,1,6,8] 则 最大差值为3。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function differ(arr)&#123;</span><br><span class="line">if (arr.length&lt;2) return 0</span><br><span class="line">arr.sort(function(a,b)&#123;</span><br><span class="line">return a-b</span><br><span class="line">&#125;)</span><br><span class="line">var maxDiffer = 0</span><br><span class="line">for (var i = 0; i &lt; arr.length-1; i++) &#123;</span><br><span class="line">if (arr[i+1] - arr[i] &gt; maxDiffer) &#123;</span><br><span class="line">maxDiffer = arr[i+1] - arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return maxDiffer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到了数组方法sort()，复习一下：<br><code>arr.sort()</code></p><ul><li>该操作将arr排序后返回。原数组改变，返回的是排序后的数组。</li><li>可以接受一个函数作为参数，不传参的情况下将元素转换为字符串，然后比较它们的UTF-16代码单元值序列</li><li>传入一个函数的情况下：按照该函数指定的方法对arr进行排序。<br>  函数接受两个参数：a，b<br>  <strong>如果函数的返回值小于0，那么a排在b的前面，</strong><br>  <strong>如果函数的返回值等于0，那么a，b保持不动</strong><br>  <strong>如果函数的返回值大于0，那么a排在b的后面</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;最大差值&quot;&gt;&lt;a href=&quot;#最大差值&quot; class=&quot;headerlink&quot; title=&quot;最大差值&quot;&gt;&lt;/a&gt;最大差值&lt;/h3&gt;&lt;p&gt;给定一个未排序的数列，找到此数列在已排序状态下的两个相邻值的最大差值，少于两个值时返回0。例如：给定数列 [1,3,2,0,1,6,8] 则 最大差值为3。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://twentyshaw.github.io/categories/JavaScript/"/>
    
      <category term="刷题" scheme="https://twentyshaw.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="JS" scheme="https://twentyshaw.github.io/tags/JS/"/>
    
      <category term="代码题" scheme="https://twentyshaw.github.io/tags/%E4%BB%A3%E7%A0%81%E9%A2%98/"/>
    
      <category term="数组" scheme="https://twentyshaw.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议学习笔记(1)</title>
    <link href="https://twentyshaw.github.io/2019/11/11/HTTP%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>https://twentyshaw.github.io/2019/11/11/HTTP协议学习笔记-1/</id>
    <published>2019-11-11T05:48:25.000Z</published>
    <updated>2019-11-14T03:45:14.626Z</updated>
    
    <content type="html"><![CDATA[<p>先来看看MDN给出的定义：</p><blockquote><p>超文本传输​​协议（HTTP）是一个用于传输超媒体文档（例如 HTML）的应用层协议。它是为 Web 浏览器与 Web 服务器之间的通信而设计的，但也可以用于其他目的。<a id="more"></a>HTTP 遵循经典的客户端-服务端模型，客户端打开一个连接以发出请求，然后等待它收到服务器端响应。HTTP 是无状态协议，这意味着服务器不会在两个请求之间保留任何数据（状态）。该协议虽然通常基于 TCP/IP 层，但可以在任何可靠的传输层上使用；也就是说，不像 UDP，它是一个不会静默丢失消息的协议。</p></blockquote><p>其中涉及到的几个关键点：<br><strong>1. 超媒体文档</strong><br><strong>2. 应用层协议</strong><br><strong>3. 作用：客户端与服务端的通信</strong><br><strong>4. 无状态协议</strong><br><strong>5. TCP/IP 层</strong></p><h3 id="1-超媒体文档"><a href="#1-超媒体文档" class="headerlink" title="1. 超媒体文档"></a>1. 超媒体文档</h3><p>Web上的信息不同于我们平时看到的普通文本组成的线性信息，它是非线性的，<strong>超文本文件（hypertext）</strong>之间可以通过超链接来互相跳转。一个超文本文件就叫做一个网页。<br>Web上的信息不光只有超文本文件，还包括语音，图形，动画等。这些信息之间也可以由超链接互相连接，它们共同组成了<strong>超媒体文件（hypermedia）</strong>。</p><h3 id="2-应用层协议"><a href="#2-应用层协议" class="headerlink" title="2. 应用层协议"></a>2. 应用层协议</h3><p>互联网的实现，从上至下大致分为：<br><img src="https://upload-images.jianshu.io/upload_images/5426662-97d01324e4503360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>实体层靠近硬件，应用层靠近用户。<br>每一层为了完成自己特定的功能都要遵从一个规则，这个规则就称为协议。<br>应用层收到来自传输层的数据以后，要进行解读。由于传输层传过来的数据是各式各样的，比如有网页，文件，Email等。</p><blockquote><p><strong>“应用层”的作用，就是规定应用程序的数据格式。</strong></p></blockquote><p>想要合理的解读出这些数据，就需要根据不同的规则来解读。<br>HTTP就是其中一种规则，用来解读HTML这样的网络资源。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先来看看MDN给出的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;超文本传输​​协议（HTTP）是一个用于传输超媒体文档（例如 HTML）的应用层协议。它是为 Web 浏览器与 Web 服务器之间的通信而设计的，但也可以用于其他目的。
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://twentyshaw.github.io/categories/JavaScript/"/>
    
      <category term="计算机基础" scheme="https://twentyshaw.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JS" scheme="https://twentyshaw.github.io/tags/JS/"/>
    
      <category term="HTTP" scheme="https://twentyshaw.github.io/tags/HTTP/"/>
    
      <category term="计算机基础" scheme="https://twentyshaw.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JS代码题2</title>
    <link href="https://twentyshaw.github.io/2019/11/11/JS%E4%BB%A3%E7%A0%81%E9%A2%982/"/>
    <id>https://twentyshaw.github.io/2019/11/11/JS代码题2/</id>
    <published>2019-11-11T01:31:07.000Z</published>
    <updated>2019-11-11T01:32:56.054Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现千分位格式化"><a href="#实现千分位格式化" class="headerlink" title="实现千分位格式化"></a>实现千分位格式化</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function th(n)&#123;</span><br><span class="line">if (n&lt;1000) return</span><br><span class="line">var arr = n.toString().split(&apos;&apos;).reverse()</span><br><span class="line">var result = []</span><br><span class="line">var count = 0</span><br><span class="line">for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">result.unshift(arr[i])</span><br><span class="line">if (count&lt;arr.length-1 &amp;&amp; ++count % 3 === 0) &#123;</span><br><span class="line">result.unshift(&apos;,&apos;)</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">return result.join(&apos;&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>要注意判断count的时候限定count的大小</strong><br>如果不写<code>count&lt;arr.length-1</code>的话，当n为六位数时，会在第六位前面也加上一个“，”如：<br><img src="https://upload-images.jianshu.io/upload_images/5426662-b4e8bb82411c16d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实现千分位格式化&quot;&gt;&lt;a href=&quot;#实现千分位格式化&quot; class=&quot;headerlink&quot; title=&quot;实现千分位格式化&quot;&gt;&lt;/a&gt;实现千分位格式化&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://twentyshaw.github.io/categories/JavaScript/"/>
    
      <category term="刷题" scheme="https://twentyshaw.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="JS" scheme="https://twentyshaw.github.io/tags/JS/"/>
    
      <category term="代码题" scheme="https://twentyshaw.github.io/tags/%E4%BB%A3%E7%A0%81%E9%A2%98/"/>
    
      <category term="数组" scheme="https://twentyshaw.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>JS代码题1</title>
    <link href="https://twentyshaw.github.io/2019/11/10/JS%E4%BB%A3%E7%A0%81%E9%A2%981/"/>
    <id>https://twentyshaw.github.io/2019/11/10/JS代码题1/</id>
    <published>2019-11-10T05:22:28.000Z</published>
    <updated>2019-11-11T01:33:09.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="接收两个参数m和n。返回一个数组，该数组长度为m，值为n。（不能使用循环）"><a href="#接收两个参数m和n。返回一个数组，该数组长度为m，值为n。（不能使用循环）" class="headerlink" title="接收两个参数m和n。返回一个数组，该数组长度为m，值为n。（不能使用循环）"></a>接收两个参数m和n。返回一个数组，该数组长度为m，值为n。（不能使用循环）</h3><a id="more"></a><h4 id="1-递归法"><a href="#1-递归法" class="headerlink" title="1. 递归法"></a>1. 递归法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function output(m,n)&#123;</span><br><span class="line">let result = []</span><br><span class="line">if (m === 0) &#123;</span><br><span class="line">return result</span><br><span class="line">&#125;else&#123;</span><br><span class="line">result.unshift(n)</span><br><span class="line">return output(--m,n).concat(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用数组方法 <code>unshift()</code>来添加数组成员</li><li>使用数组方法 <code>concat()</code>来本轮结果与递归产生的数组</li></ul><h4 id="2-Array-from"><a href="#2-Array-from" class="headerlink" title="2. Array.from()"></a>2. Array.from()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function output(m,n)&#123;</span><br><span class="line">return Array.from(&#123;length:m&#125;,v=&gt;n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6的Array.from()方法，它可将两类对象转化为数组：</p><ul><li>类似数组的对象：最本质的特征就是该对象要拥有<code>length</code>属性</li><li>可遍历的对象<br>Array.from()可以接受两个参数：</li><li>第一个参数是想要转成数组的对象</li><li>第二个参数是一个map方法。<br>与数组的map方法一致，第一个参数是数组成员→item，第二个参数（可省略）是数组的索引index，第三个参数（可省略）是数组本身</li></ul><p>基于第一个参数生成一个数组后，如果存在第二个参数，就对该数组进行map操作，并将map操作后的数组作为结果返回。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;接收两个参数m和n。返回一个数组，该数组长度为m，值为n。（不能使用循环）&quot;&gt;&lt;a href=&quot;#接收两个参数m和n。返回一个数组，该数组长度为m，值为n。（不能使用循环）&quot; class=&quot;headerlink&quot; title=&quot;接收两个参数m和n。返回一个数组，该数组长度为m，值为n。（不能使用循环）&quot;&gt;&lt;/a&gt;接收两个参数m和n。返回一个数组，该数组长度为m，值为n。（不能使用循环）&lt;/h3&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://twentyshaw.github.io/categories/JavaScript/"/>
    
      <category term="刷题" scheme="https://twentyshaw.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="JS" scheme="https://twentyshaw.github.io/tags/JS/"/>
    
      <category term="代码题" scheme="https://twentyshaw.github.io/tags/%E4%BB%A3%E7%A0%81%E9%A2%98/"/>
    
      <category term="数组" scheme="https://twentyshaw.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>始まるんじゃない 始めるんだぜ</title>
    <link href="https://twentyshaw.github.io/2019/11/08/%E5%A7%8B%E3%81%BE%E3%82%8B%E3%82%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84-%E5%A7%8B%E3%82%81%E3%82%8B%E3%82%93%E3%81%A0%E3%81%9Chexo-new-page-tag/"/>
    <id>https://twentyshaw.github.io/2019/11/08/始まるんじゃない-始めるんだぜhexo-new-page-tag/</id>
    <published>2019-11-08T09:32:00.000Z</published>
    <updated>2019-11-08T10:53:05.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="好像有过很多开始，但最后都无疾而终"><a href="#好像有过很多开始，但最后都无疾而终" class="headerlink" title="好像有过很多开始，但最后都无疾而终"></a>好像有过很多开始，但最后都无疾而终</h3><p>像被碌碌无为的日常吞没了一样，让人察觉不到自己的改变</p><a id="more"></a><p>以为自己还是曾经的自己，所以从不思考，不深究<br>当现在<br>当这个疲惫和失望交织的十月过去时<br>当虚度的光阴以“失败”的形象强势的出现在眼前的时候<br>才惊醒过来，原来不一样了<br>人是怎么废掉的<br>不是失去目标的时候<br>不是停止努力的时候<br>而是不再思考<br>思考是很累的事情<br>思考会让人认识到很多残忍的真相的存在<br>所以逃避是舒服的<br>只要不思考，就可以当作现在和以前一样<br>然后盲目愉悦的在生活的泥沼中越陷愈深</p><p>也不是完全没有警醒过<br>可是意志一旦被舒服的泥沼拉住时，是很难拔出来的</p><p>但还是要拔。<br>总羡慕过去的自己还是不太舒服<br>并且当这羡慕演变为嫉妒时，就总想做点什么来宣泄这些失意和愤怒<br>人不应该越来越差</p><p>所以<br>这个博客，是一个成长记录<br>也是我的自我救赎</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;好像有过很多开始，但最后都无疾而终&quot;&gt;&lt;a href=&quot;#好像有过很多开始，但最后都无疾而终&quot; class=&quot;headerlink&quot; title=&quot;好像有过很多开始，但最后都无疾而终&quot;&gt;&lt;/a&gt;好像有过很多开始，但最后都无疾而终&lt;/h3&gt;&lt;p&gt;像被碌碌无为的日常吞没了一样，让人察觉不到自己的改变&lt;/p&gt;
    
    </summary>
    
    
      <category term="日常" scheme="https://twentyshaw.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="起点" scheme="https://twentyshaw.github.io/tags/%E8%B5%B7%E7%82%B9/"/>
    
  </entry>
  
</feed>
